---
import MainLayout from "../layouts/MainLayout.astro";
import Nav from "../components/Nav.astro";
import Tabel from "../components/Tabel.astro";
import Button from "../components/Button.astro";
import FormLayout from "../layouts/FormLayout.astro";

const fields = [
  {
    id: "doc-number",
    label: "PAN",
    type: "text",
    name: "documentNumber",
    placeholder: "D123 4567 8901 234",
    required: true,
  },
  {
    id: "doc-name",
    label: "Name on PAN",
    type: "text",
    name: "holdingPersonName",
    placeholder: "ZEN RAYN",
    required: true,
  },
  {
    id: "doc-dob",
    label: "Date of Birth",
    type: "date",
    name: "DOB",
    required: true,
  },
  {
    id: "doc-fathername",
    label: "Father Name",
    type: "text",
    name: "fathername",
    placeholder: "ZEN RAY",
    required: true,
  },
];
const inlineStyle = `
  background-color: rgb(200, 239, 253);
`;
---

<MainLayout>
  <nav slot="nav">
    <Nav />
  </nav>
  <div class="heading">
    <p>
      Please enter the details in the below form
      <p class="subheading">All fields are required</p>
    </p>
    <section>
      <FormLayout
        formId="pan"
        formName="pan"
        fields={fields}
        genderLabel="Gender"
        style={inlineStyle}
      />
      <Button />
    </section>
    <Tabel />
  </div>
  <div id="canvasContainer" class="canvas" style="display: none;">
    <canvas id="panCanvas"></canvas>
    <button id="downloadButton" class="download" style="display: none;"
      >Download Image</button
    >
  </div>
</MainLayout>
<script is:inline type="module">
  import { generateImage } from "/scripts/image.js";
  import { generateEntryHTML } from "/scripts/entryHelpers.js";

  const panForm = document.querySelector(".form");
  const saveButton = document.querySelector(".save__button");
  const resetButton = document.querySelector(".reset__button");
  const container = document.querySelector(".container");
  const canvas = document.getElementById("panCanvas");
  const context = canvas ? canvas.getContext("2d") : null;
  let entryCount = 0;
  let currentEditItem = null;

  if (!context) {
    console.error("Canvas context could not be obtained.");
  } else {
    const handleSubmit = (event) => {
      event.preventDefault();
      const formData = new FormData(panForm);
      const documentNumber = formData.get("documentNumber")?.trim();
      const holdingPersonName = formData.get("holdingPersonName")?.trim();
      const DOB = formData.get("DOB")?.trim();
      const gender = formData.get("gender");
      const fathername = formData.get("fathername")?.trim();

      if (documentNumber && holdingPersonName && DOB && fathername) {
        if (currentEditItem) {
          updateEntry({
            item: currentEditItem,
            documentNumber,
            holdingPersonName,
            DOB,
            gender,
            fathername,
          });
        } else {
          createNewEntry({
            documentNumber,
            holdingPersonName,
            DOB,
            gender,
            fathername,
          });
        }
        resetForm();
      } else {
        console.log("Please fill in all required fields.");
      }
    };

    const createNewEntry = ({
      documentNumber,
      holdingPersonName,
      DOB,
      gender,
      fathername,
    }) => {
      entryCount++;
      const newEntryHTML = generateEntryHTML({
        entryCount,
        documentNumber,
        holdingPersonName,
        DOB: formatDate(DOB),
        gender,
        type: "PAN",
        additionalFields: { fathername },
      });
      container.insertAdjacentHTML("beforeend", newEntryHTML);
    };

    const updateEntry = ({
      item,
      documentNumber,
      holdingPersonName,
      DOB,
      gender,
      fathername,
    }) => {
      const maleSymbol = String.fromCharCode(0x2642);
      const femaleSymbol = String.fromCharCode(0x2640);
      const genderSymbol = gender === "male" ? maleSymbol : femaleSymbol;

      item.dataset.documentNumber = documentNumber;
      item.dataset.holdingPersonName = holdingPersonName;
      item.dataset.dob = formatDate(DOB);
      item.dataset.gender = gender;
      item.dataset.fathername = fathername;

      item.querySelector('[data-label="documentNumber"]').textContent =
        documentNumber;
      item.querySelector('[data-label="holdingPersonName"]').textContent =
        holdingPersonName;
      item.querySelector('[data-label="genderSymbol"]').textContent =
        genderSymbol;
      item.querySelector('[data-label="DOB"]').textContent = formatDate(DOB);
      item.querySelector('[data-label="fathername"]').textContent = fathername;
      currentEditItem = null;
    };

    const resetForm = () => {
      panForm.reset();
      currentEditItem = null;
    };

    const deleteItem = (event) => {
      const item = event.target.closest(".item");
      item.remove();
    };

    const editItem = (event) => {
      const item = event.target.closest(".item");

      const documentNumber = item.dataset.documentNumber;
      const holdingPersonName = item.dataset.holdingPersonName;
      const gender = item.dataset.gender;
      const DOB = item.dataset.dob;
      const fathername = item.dataset.fathername;

      panForm.querySelector("#doc-number").value = documentNumber;
      panForm.querySelector("#doc-name").value = holdingPersonName;
      panForm.querySelector("#doc-dob").value = convertToDateInputFormat(DOB);
      panForm.querySelector(`#gender_${gender}`).checked = true;
      panForm.querySelector("#doc-fathername").value = fathername;

      currentEditItem = item;
    };

    const viewItem = (event) => {
      const item = event.target.closest(".item");

      const pan_detail = {
        number: item.dataset.documentNumber,
        name: item.dataset.holdingPersonName,
        gender: item.dataset.gender === "male" ? "♂" : "♀",
        dob: item.dataset.dob,
        fathername: item.dataset.fathername,
      };

      generatePanImage(pan_detail);
    };

    const buildDetail = ({ type, detail }) => {
      const details = [
        { label: "PAN:", value: detail.number },
        { label: "Name:", value: detail.name },
        {
          label: "Gender:",
          value: detail.gender === "♂" ? "Male" : "Female",
        },
        { label: "Date of birth:", value: detail.dob },
        { label: "Father Name:", value: detail.fathername },
      ];
      return { [type]: details };
    };

    const generatePanImage = (pan_detail) => {
      const data = buildDetail({ type: "pan", detail: pan_detail });

      generateImage({
        title: "--PAN Card--",
        data,
        canvas: document.getElementById("panCanvas"),
        canvasContainer: document.getElementById("canvasContainer"),
        downloadButton: document.getElementById("downloadButton"),
        backgroundColor: "#87CEEB",
        borderColor: "#7DF9FF",
      });
    };

    const formatDate = (date) => {
      if (!date) return "";
      const [year, month, day] = date.split("-");
      return `${day}/${month}/${year}`;
    };

    const convertToDateInputFormat = (date) => {
      if (!date) return "";
      const [day, month, year] = date.split("/");
      return `${year}-${month}-${day}`;
    };

    resetButton.addEventListener("click", resetForm);
    saveButton.addEventListener("click", handleSubmit);
    container.addEventListener("click", (event) => {
      if (event.target.classList.contains("delete__btn")) {
        deleteItem(event);
      } else if (event.target.classList.contains("edit__btn")) {
        editItem(event);
      } else if (event.target.classList.contains("view__btn")) {
        viewItem(event);
      }
    });

    const navLinks = document.querySelectorAll(".nav-item");
    const currentPath = window.location.pathname;
    navLinks.forEach((link) => {
      if (link.getAttribute("href") === currentPath) {
        link.classList.add("active");
      }
    });
  }
</script>
