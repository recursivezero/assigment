---
import MainLayout from "../layouts/MainLayout.astro";
import Nav from "../components/Nav.astro";
import Button from "../components/Button.astro";
import Tabel from "../components/Tabel.astro";
import FormLayout from "../layouts/FormLayout.astro";

const fields = [
  {
    id: "doc-number",
    label: "Id Number",
    type: "text",
    name: "documentNumber",
    placeholder: "D123 4567 8901 234",
    required: true,
  },
  {
    id: "doc-name",
    label: "Name on Id",
    type: "text",
    name: "holdingPersonName",
    placeholder: "ZEN RAYN",
    required: true,
  },
  {
    id: "doc-fathername",
    label: "Father Name",
    type: "text",
    name: "fathername",
    placeholder: "ZEN RAY",
    required: true,
  },
  {
    id: "doc-dob",
    label: "Date of Birth",
    type: "date",
    name: "DOB",
    required: true,
  },
];
const inlineStyle = `
   background-color: rgb(219, 220, 249);
`;
---

<MainLayout>
  <nav slot="nav">
    <Nav />
  </nav>
  <div class="heading">
    <p>
      Please enter the details in the below form
      <p class="subheading">all feilds are required</p>
    </p>
    <section>
      <FormLayout
        formId="voter"
        formName="voter"
        fields={fields}
        genderLabel="Gender"
        style={inlineStyle}
      />

      <Button />
    </section>

    <Tabel />
    <div id="canvasContainer" class="canvas" style="display: none;">
      <canvas id="voterCanvas"></canvas>
      <button id="downloadButton" class="download" style="display: none;"
        >Download Image</button
      >
    </div>
  </div>
</MainLayout>
<script is:inline type="module">
  import { generateImage } from "/scripts/image.js";

  const voterForm = document.querySelector(".form");
  const saveButton = document.querySelector(".save__button");
  const resetButton = document.querySelector(".reset__button");
  const container = document.querySelector(".container");
  const canvas = document.getElementById("voterCanvas");
  const context = canvas.getContext("2d");

  let entryCount = 0;
  let currentEditItem = null;

  const handleSubmit = (event) => {
    event.preventDefault();
    const formData = new FormData(voterForm);
    const documentNumber = formData.get("documentNumber")?.trim();
    const holdingPersonName = formData.get("holdingPersonName")?.trim();
    const DOB = formData.get("DOB")?.trim();
    const gender = formData.get("gender");
    const fathername = formData.get("fathername")?.trim();

    if (documentNumber && holdingPersonName && DOB && fathername) {
      if (currentEditItem) {
        updateEntry(
          currentEditItem,
          documentNumber,
          holdingPersonName,
          DOB,
          gender,
          fathername
        );
      } else {
        createNewEntry(
          documentNumber,
          holdingPersonName,
          DOB,
          gender,
          fathername
        );
      }
      resetForm();
    } else {
      console.log("Please fill in all required fields.");
    }
  };

  const createNewEntry = (
    documentNumber,
    holdingPersonName,
    DOB,
    gender,
    fathername
  ) => {
    entryCount++;
    const maleSymbol = String.fromCharCode(0x2642);
    const femaleSymbol = String.fromCharCode(0x2640);
    const genderSymbol = gender === "male" ? maleSymbol : femaleSymbol;

    container.insertAdjacentHTML(
      "beforeend",
      `
           <div class="item" data-entry-id="${entryCount}" 
                      data-document-number="${documentNumber}" 
                      data-holding-person-name="${holdingPersonName}" 
                      data-dob="${formatDate(DOB)}" 
                      data-gender="${gender}" 
                      data-fathername="${fathername}">
                      <div data-label="entryCount">${entryCount}</div>
                      <div data-label="voterType">Voter ID</div>
                      <div data-label="documentNumber">${documentNumber}</div>
                      <div data-label="holdingPersonName">${holdingPersonName}</div>
                      <div data-label="genderSymbol">${genderSymbol}</div>
                      <div data-label="DOB">${formatDate(DOB)}</div>
          <div>
            <button class="view__btn" type="button">View</button>
            <button class="edit__btn" type="button">Edit</button>
            <button class="delete__btn" type="button">Delete</button>
        </div>
    </div>
    `
    );
  };

  const updateEntry = (
    item,
    documentNumber,
    holdingPersonName,
    DOB,
    gender,
    fathername
  ) => {
    const maleSymbol = String.fromCharCode(0x2642);
    const femaleSymbol = String.fromCharCode(0x2640);
    const genderSymbol = gender === "male" ? maleSymbol : femaleSymbol;

    item.dataset.documentNumber = documentNumber;
    item.dataset.holdingPersonName = holdingPersonName;
    item.dataset.dob = formatDate(DOB);
    item.dataset.gender = gender;
    item.dataset.fathername = fathername;

    item.querySelector('[data-label="documentNumber"]').textContent =
      documentNumber;
    item.querySelector('[data-label="holdingPersonName"]').textContent =
      holdingPersonName;
    item.querySelector('[data-label="genderSymbol"]').textContent =
      genderSymbol;
    item.querySelector('[data-label="DOB"]').textContent = formatDate(DOB);

    currentEditItem = null;
  };

  const resetForm = () => {
    voterForm.reset();
    currentEditItem = null;
  };

  const deleteItem = (event) => {
    const item = event.target.closest(".item");
    item.remove();
  };

  const editItem = (event) => {
    const item = event.target.closest(".item");

    const documentNumber = item.dataset.documentNumber;
    const holdingPersonName = item.dataset.holdingPersonName;
    const gender = item.dataset.gender;
    const DOB = item.dataset.dob;
    const fathername = item.dataset.fathername;

    voterForm.querySelector("#doc-number").value = documentNumber;
    voterForm.querySelector("#doc-name").value = holdingPersonName;
    voterForm.querySelector("#doc-dob").value = convertToDateInputFormat(DOB);
    voterForm.querySelector(`#gender_${gender}`).checked = true;
    voterForm.querySelector("#doc-fathername").value = fathername;

    currentEditItem = item;
  };

  const viewItem = (event) => {
    const item = event.target.closest(".item");

    const voter_detail = {
      number: item.dataset.documentNumber,
      name: item.dataset.holdingPersonName,
      gender: item.dataset.gender === "male" ? "♂" : "♀",
      dob: item.dataset.dob,
      fathername: item.dataset.fathername,
    };

    generateVoterImage(voter_detail);
  };

  const buildDetail = ({ type, detail }) => {
    const details = [
      { label: "Voter ID:", value: detail.number },
      { label: "Name:", value: detail.name },
      {
        label: "Gender:",
        value: detail.gender === "♂" ? "Male" : "Female",
      },
      { label: "Date of Birth:", value: detail.dob },
      { label: "Father's Name:", value: detail.fathername },
    ];
    return { [type]: details };
  };

  const generateVoterImage = (voter_detail) => {
    const data = buildDetail({ type: "voter", detail: voter_detail });

    generateImage({
      title: "--Voter Card--",
      data,
      canvas: document.getElementById("voterCanvas"),
      canvasContainer: document.getElementById("canvasContainer"),
      downloadButton: document.getElementById("downloadButton"),
      backgroundColor: "#fff",
    });
  };

  const formatDate = (date) => {
    if (!date) return "";
    const [year, month, day] = date.split("-");
    return `${day}/${month}/${year}`;
  };

  const convertToDateInputFormat = (date) => {
    if (!date) return "";
    const [day, month, year] = date.split("/");
    return `${year}-${month}-${day}`;
  };

  resetButton.addEventListener("click", resetForm);
  saveButton.addEventListener("click", handleSubmit);
  container.addEventListener("click", (event) => {
    if (event.target.classList.contains("delete__btn")) {
      deleteItem(event);
    } else if (event.target.classList.contains("edit__btn")) {
      editItem(event);
    } else if (event.target.classList.contains("view__btn")) {
      viewItem(event);
    }
  });

  const navLinks = document.querySelectorAll(".nav-item");
  const currentPath = window.location.pathname;
  navLinks.forEach((link) => {
    if (link.getAttribute("href") === currentPath) {
      link.classList.add("active");
    }
  });
</script>
